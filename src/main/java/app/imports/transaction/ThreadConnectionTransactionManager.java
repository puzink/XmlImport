package app.imports.transaction;

import java.sql.SQLException;

/**
 * Управляет транзакциями {@link java.sql.Connection} в текущем потоке.
 * Транзакции бывают "обычными" и "логическими":
 *      1) транзакция считается "логической", если в потоке уже есть открытая транзакция.
 *          Такая транзакция продолжает текущую.
 *      2) транзакция считается "обычной", если в потоке нет открытых транзакций.
 * Для фиксирования обычной транзакции необходимо сначала закрыть все логические транзакции,
 *      начатые внутри этой.
 * Отмена изменений логической транзакции распространяется на все изменения,
 *      произведённые внутри обычной транзакции, породившей эту.
 */
public interface ThreadConnectionTransactionManager {

    /**
     * Начинает новую транзакцию.
     * Если транзакция уже начата, тогда создаётся новая логическая транзакция,
     *          которая продолжает текущую.
     * @param isolationLevel - уровень изоляции транзакции
     * @throws SQLException - ошибка при запуске транзакции
     */
    void begin(int isolationLevel) throws SQLException;

    /**
     * Фиксирует или закрывает последнюю начатую транзакцию в потоке в зависимости от её статуса.
     * Если эта транзакция является логической,
     *      тогда фиксации не происходит, и она лишь закрывается.
     * Для фиксации обычной транзакции необходимо сначала закрыть все логические,
     *      порождённые этой.
     * @throws SQLException - ошибка при фиксации изменений
     */
    void commit() throws SQLException;

    /**
     * Откатывает транзакцию.
     * Если транзакция является логической, тогда происходит откат основной транзакции,
     *      которая породила эту.
     * @throws SQLException - ошибка при откате изменений
     */
    void rollback() throws SQLException;

    /**
     * Закрывает {@link java.sql.Connection}, связанный с транзакцией.
     * @throws SQLException - ошибки при закрытии соединения
     */
    void close() throws SQLException;

}
